import { createAztecNodeClient } from "@aztec/aztec.js";
import {
  InboxAbi,
  OutboxAbi,
  RollupAbi,
  FeeJuicePortalAbi,
} from "@aztec/l1-artifacts";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import prettier from "prettier";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function generateDeployedContracts() {
  console.log("Generating deployed contracts...");
  const AZTEC_URL = "http://aztec-sandbox-node.localhost";
  const ETHEREUM_URL = "http://anvil-ethereum-node.localhost";
  const nodeClient = createAztecNodeClient(AZTEC_URL);

  const [l1ContractAddresses, chainId] = await Promise.all([
    nodeClient.getL1ContractAddresses(),
    nodeClient.getChainId(),
  ]);

  const contracts = {
    [chainId]: {
      Inbox: {
        address: l1ContractAddresses.inboxAddress.toString(),
        abi: InboxAbi,
      },
      Outbox: {
        address: l1ContractAddresses.outboxAddress.toString(),
        abi: OutboxAbi,
      },
      Rollup: {
        address: l1ContractAddresses.rollupAddress.toString(),
        abi: RollupAbi,
      },
      FeeJuicePortal: {
        address: l1ContractAddresses.feeJuicePortalAddress.toString(),
        abi: FeeJuicePortalAbi,
      },
    },
  };

  const chainConfig = {
    chainId: chainId,
    rpcUrl: ETHEREUM_URL,
  };

  const deployedContractsContent = `
/**
 * This file is autogenerated by Scaffold-ETH (aztec-message-box)
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

export const chainConfig = ${JSON.stringify(chainConfig, null, 2)};

const deployedContracts: GenericContractsDeclaration = ${JSON.stringify(contracts, null, 2)};

export default deployedContracts;
`;
  await prettier.format(deployedContractsContent, { parser: "typescript" });

  const outputPath = path.join(
    __dirname,
    "..",
    "packages",
    "nextjs",
    "contracts",
    "deployedContracts.ts"
  );

  try {
    fs.writeFileSync(outputPath, deployedContractsContent);
    console.log(`Deployed contracts information written to ${outputPath}`);
  } catch (error) {
    console.error(`Error writing to ${outputPath}:`, error);
  }
}

generateDeployedContracts().catch(console.error);
